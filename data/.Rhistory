filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
gender_map$Sieries.Name
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
#import data
library(sf)
library(ggplot2)
worldmap <- st_read("TM_WORLD_BORDERS-0.3.shp",stringsAsFactors=FALSE,quiet=TRUE)
names(worldmap)[3] <- paste('Country.Code')
worldmap <- st_transform(worldmap, "+init=esri:54030")
raw_gender <- read.csv('Gender_wewant.csv')
gender_map <- merge(worldmap, raw_gender, by="Country.Code")
library(stringr)
for (i in 15:ncol(gender_map)-1){
names(gender_map)[i] <- str_sub(names(gender_map)[i],-5,-2)
if((i >= 17) == (i < 41)){
gender_map[i+1] <- (gender_map[[i+1]] + gender_map[[i]] + gender_map[[i-1]] + gender_map[[i-2]]) /4
}
}
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
gender_map$Series.Name
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
View(raw_gender)
filter(raw_gender, Country.Code == RUS)
raw_gender$Country.Code
filter(raw_gender, Country.Code == 'RUS')
filter(raw_gender, raw_gender$Country.Code == 'RUS')
gender_map%>%
filter(gender_map$Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')
gender_map[gender_map$Series.Name == 'Employers, female (% of female employment) (modeled ILO estimate)']
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
library(dplyr)
#plotting
gender_map%>%
filter(Series.Name == 'Adjusted net enrollment rate, primary, female (% of primary school age children)')%>%
select('2010')%>%
ggplot() +
geom_sf(aes(fill=`2010`))+
scale_fill_gradient(low = "#FFE4F3", high = "#F62018")
View(ath)
library(tidyr)
ath<- read.csv("athlete_events.csv")
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
library(dplyr)
ath1992 <- filter(ath, Year >= 1992)
View(ath1992)
raw.ath <- group_by(ath1992, NOC, Year, Sex)
View(raw.ath)
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
library(tidyr)
raw_ath<- read.csv("athlete_events.csv")
library(dplyr)
ath1992 <- filter(ath, Year >= 1992)
library(dplyr)
ath1992 <- filter(raw_ath, Year >= 1992)
View(ath1992)
ath.clean <- data.frame(ath1992$Sex, ath1992$NOC, ath1992$Year, ath1992$Medal)
View(ath.clean)
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
library(tidyr)
raw_ath<- read.csv("athlete_events.csv")
library(dplyr)
ath <- filter(raw_ath, Year >= 1992)
ath.clean <- data.frame(ath$Sex, ath$NOC, ath$Year, ath$Medal)
View(ath.clean)
ath.group <- ath.clean%>%group_by(NOC,Year)
ath.group <- ath.clean%>%group_by(ath.NOC, ath.Year)
View(ath.group)
ath.clean$gold <- 0
ath.clean[,1]
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
library(tidyr)
raw_ath<- read.csv("athlete_events.csv")
library(dplyr)
ath <- filter(raw_ath, (Year >= 1992) == (Sex == 'F'))
View(ath)
ath <- filter(raw_ath, (Year >= 1992) == (Sex == 'F'))
library(dplyr)
ath <- raw_ath%>%filter(Year >= 1992 | Sex == 'F')
View(ath)
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
library(tidyr)
raw_ath<- read.csv("athlete_events.csv")
library(dplyr)
ath <- raw_ath%>%
filter(Year >= 1992 | Sex =='F')
View(ath)
ath <- raw_ath%>%
filter(Year >= 1992)%>%
filter(Sex == 'F')
View(ath)
ath.clean <- data.frame(ath$Sex, ath$NOC, ath$Year, ath$Medal)
View(ath.clean)
ath.clean$gold <- 0
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
library(tidyr)
raw_ath<- read.csv("athlete_events.csv")
library(dplyr)
ath <- raw_ath%>%
filter(Year >= 1992)%>%
filter(Sex == 'F')
ath.clean$gold <- 0
ath.clean$silver <- 0
ath.clean$bronze <- 0
ath.clean <- data.frame(ath$Sex, ath$NOC, ath$Year, ath$Medal)
ath.clean$gold <- 0
ath.clean$silver <- 0
ath.clean$bronze <- 0
View(ath.clean)
ath.clean$gold[1]
for (i in 1:nrow(ath.clean)){
if (ath.clean[i,4] == 'Gold'){
ath.clean$gold[i] <- 1
}
else if (ath.clean[i,4] == 'Silver'){
ath.clean$silver[i] <- 1
}
else if (ath.clean[i,4] == 'Bronze'){
ath.clean$bronze[i] <- 1
}
}
ath.clean[8,4]
ath.clean[8,4] == Gold
ath.clean[8,4] == 'Gold'
for (i in 1:nrow(ath.clean)){
if (ath.clean[i,4] == 'Gold'){
ath.clean$gold[i] <- 1
}
else if (ath.clean[i,4] == 'Silver'){
ath.clean$silver[i] <- 1
}
else if (ath.clean[i,4] == 'Bronze'){
ath.clean$bronze[i] <- 1
}
}
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
library(tidyr)
raw_ath<- read.csv("athlete_events.csv")
library(dplyr)
ath <- raw_ath%>%
filter(Year >= 1992)%>%
filter(Sex == 'F')
ath.clean <- data.frame(ath$Sex, ath$NOC, ath$Year, ath$Medal)
ath.clean$gold <- 0
ath.clean$silver <- 0
ath.clean$bronze <- 0
for (i in 1:nrow(ath.clean)){
print(i)
}
for (i in 1:nrow(ath.clean)){
if (ath.clean[i,2] == 'EST'){
print(1)
}
}
for (i in 1:nrow(ath.clean)){
if (ath.clean[i,4] == 'Gold'){
ath.clean$gold[i] <- 1
}
}
ath.clean[1,4]
ath.clean[1,4] == 'Gold'
library(sf)
library(maps)
library(ggplot2)
#points
data(meuse,package="sp")
meuse_sf <- st_as_sf(meuse, coords = c("x", "y"), crs = 28992, agr = "constant")
summary(meuse_sf)
meuse_sf %>% ggplot() + geom_sf(aes(size=cadmium))
library(sf)
library(tidyverse)
install.packages('tidyverse')
load(url("http://dl.dropbox.com/u/61803503/nycounty.RData"))
head(ny); head(key)  #view the data set from my drop box
if (!require("pacman")) install.packages("pacman")
p_load(ggplot2, ggtree, dplyr, tidyr, sp, maps, pipeR, grid, XML, gtable)
getLabelPoint <- function(county) {Polygon(county[c('long', 'lat')])@labpt}
df <- map_data('county', 'new york')                 # NY region county data
centroids <- by(df, df$subregion, getLabelPoint)     # Returns list
centroids <- do.call("rbind.data.frame", centroids)  # Convert to Data Frame
names(centroids) <- c('long', 'lat')                 # Appropriate Header
pops <-  "http://data.newsday.com/long-island/data/census/county-population-estimates-2012/" %>%
readHTMLTable(which=1) %>%
tbl_df() %>%
select(1:2) %>%
setNames(c("region", "population")) %>%
mutate(
population = {as.numeric(gsub("\\D", "", population))},
region = tolower(gsub("\\s+[Cc]ounty|\\.", "", region)),
#weight = ((1 - (1/(1 + exp(population/sum(population)))))/11)
weight = exp(population/sum(population)),
weight = sqrt(weight/sum(weight))/3
)
race_data_long <- add_rownames(centroids, "region") %>>%
left_join({distinct(select(ny, region:other))}) %>>%
left_join(pops) %>>%
(~ race_data) %>>%
gather(race, prop, white:other) %>%
split(., .$region)
pies <- setNames(lapply(1:length(race_data_long), function(i){
ggplot(race_data_long[[i]], aes(x=1, prop, fill=race)) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y") +
theme_tree() +
xlab(NULL) +
ylab(NULL) +
theme_transparent() +
theme(plot.margin=unit(c(0,0,0,0),"mm"))
}), names(race_data_long))
e1 <- ggplot(race_data_long[[1]], aes(x=1, prop, fill=race)) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y")
leg1 <- gtable_filter(ggplot_gtable(ggplot_build(e1)), "guide-box")
p <- ggplot(ny, aes(long, lat, group=group)) +
geom_polygon(colour='black', fill=NA) +
theme_bw() +
annotation_custom(grob = leg1, xmin = -77.5, xmax = -78.5, ymin = 44, ymax = 45)
n <- length(pies)
for (i in 1:n) {
nms <- names(pies)[i]
dat <- race_data[which(race_data$region == nms)[1], ]
p <- subview(p, pies[[i]], x=unlist(dat[["long"]])[1], y=unlist(dat[["lat"]])[1], dat[["weight"]], dat[["weight"]])
}
print(p)
load(url("http://dl.dropbox.com/u/61803503/nycounty.RData"))
head(ny); head(key)  #view the data set from my drop box
load(url("http://dl.dropbox.com/u/61803503/nycounty.RData"))
load(url("http://dl.dropbox.com/u/61803503/nycounty.RData"))
library(plotrix)
e=10^-5
myglyff=function(gi) {
floating.pie(mean(gi$long),
mean(gi$lat),
x=c(gi[1,"white"]+e,
gi[1,"black"]+e,
gi[1,"hispanic"]+e,
gi[1,"asian"]+e,
gi[1,"other"]+e),
radius=.1) #insert size variable here
}
g1=ny[which(ny$group==1),]
plot(g1$long,
g1$lat,
type='l',
xlim=c(-80,-71.5),
ylim=c(40.5,45.1))
myglyff(g1)
for(i in 2:62)
{gi=ny[which(ny$group==i),]
lines(gi$long,gi$lat)
myglyff(gi)
}
load(url("http://dl.dropbox.com/u/61803503/nycounty.RData"))
if (!require("pacman")) install.packages("pacman")
p_load(ggplot2, ggtree, dplyr, tidyr, sp, maps, pipeR, grid, XML, gtable)
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
#import data
library(sf)
library(ggplot2)
worldmap <- st_read("TM_WORLD_BORDERS-0.3.shp",stringsAsFactors=FALSE,quiet=TRUE)
View(worldmap)
if (!require("pacman")) install.packages("pacman")
p_load(ggplot2, ggtree, dplyr, tidyr, sp, maps, pipeR, grid, XML, gtable)
getLabelPoint <- function(county) {Polygon(county[c('long', 'lat')])@labpt}
df <- map_data('county', 'new york')                 # NY region county data
centroids <- by(df, df$subregion, getLabelPoint)     # Returns list
View(centroids)
centroids <- do.call("rbind.data.frame", centroids)  # Convert to Data Frame
names(centroids) <- c('long', 'lat')                 # Appropriate Header
View(centroids)
pops <-  "http://data.newsday.com/long-island/data/census/county-population-estimates-2012/" %>%
readHTMLTable(which=1) %>%
tbl_df() %>%
select(1:2) %>%
setNames(c("region", "population")) %>%
mutate(
population = {as.numeric(gsub("\\D", "", population))},
region = tolower(gsub("\\s+[Cc]ounty|\\.", "", region)),
#weight = ((1 - (1/(1 + exp(population/sum(population)))))/11)
weight = exp(population/sum(population)),
weight = sqrt(weight/sum(weight))/3
)
# read all metro data
metro <- read_acs1year(
year = 2016,
states = "US",
table_contents = c(
"white = C02003_003",
"black = C02003_004",
"asian = C02003_006"
),
geo_headers = "CBSA",
summary_level = "310"
) %>%
mutate(others = population - white - black - asian)
install.packages('scatterpie')
install.packages('totalcensus')
library(totalcensus)
library(scatterpie)
library(totalcensus)
library(dplyr)
# read all metro data
metro <- read_acs1year(
year = 2016,
states = "US",
table_contents = c(
"white = C02003_003",
"black = C02003_004",
"asian = C02003_006"
),
geo_headers = "CBSA",
summary_level = "310"
) %>%
mutate(others = population - white - black - asian)
setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
library(scatterpie)
library(totalcensus)
library(dplyr)
# read all metro data
metro <- read_acs1year(
year = 2016,
states = "US",
table_contents = c(
"white = C02003_003",
"black = C02003_004",
"asian = C02003_006"
),
geo_headers = "CBSA",
summary_level = "310"
) %>%
mutate(others = population - white - black - asian)
