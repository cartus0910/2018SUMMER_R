setwd("D:/2018.07 R_DataAnalysis/2018SUMMER_R/data")
ptgs.course <- read.csv("student-por.csv")
math.course <- read.csv("student-mat.csv")
data.source <- merge(ptgs.course,math.course,by=c("school","sex","age","address","famsize","Pstatus",
"Medu","Fedu","Mjob","Fjob","reason","nursery","internet",
"guardian","guardian","traveltime","studytime","failures",
"schoolsup","famsup","activities","higher","romantic",
"famrel","freetime","goout","Dalc","Walc","health","absences"))
head(data.source)
summary(data.source)
data.source$mathgrades <- rowMeans(cbind(data.source$G1.x,data.source$G2.x,data.source$G3.x))
data.source$portgrades <- rowMeans(cbind(data.source$G1.y,data.source$G2.y,data.source$G3.y))
data.source$alcohol <- data.source$Dalc + data.source$Walc
library(plyr)
data.source$Dalc <- as.factor(data.source$Dalc)
data.source$Dalc <- mapvalues(data.source$Dalc,
from = 1:5,
to = c("Very Low", "Low", "Medium", "High", "Very High"))
data.source$Walc <- as.factor(data.source$Walc)
data.source$Walc <- mapvalues(data.source$Walc,
from = 1:5,
to = c("Very Low", "Low", "Medium", "High", "Very High"))
data.source$alcohol <- as.factor(data.source$alcohol)
data.source$alc <- mapvalues(data.source$alcohol,
from = 2:8,
to = c("no","yes","yes","yes","yes","yes","yes"))
library(ggplot2)
str1=ggplot(data.source, aes(x=mathgrades, y=portgrades)) +
geom_point(aes(colour=factor(Dalc)))+ scale_colour_hue(l=25,c=150)+
geom_smooth(method = "lm", se = FALSE)
str2=ggplot(data.source, aes(x=mathgrades, y=portgrades))+
geom_point(aes(colour=factor(Walc)))+ scale_colour_hue(l=25,c=150)+
geom_smooth(method = "lm", se = FALSE)
library(gridExtra)
grid.arrange(str1,str2,nrow=2)
reg1 <- lm(mathgrades ~ portgrades, data=data.source)
summary(reg1)$r.squared
library(dplyr)
new.source <-rbind(math.course, ptgs.course) #combine the two datasets
# and eliminate the repeats:
apply.source <- new.source %>% distinct(school,sex,age,address,famsize,Pstatus,Medu,Fedu,Mjob,Fjob,reason,
guardian,traveltime,studytime,failures,schoolsup,
famsup,activities,nursery,higher,internet,romantic,
famrel,freetime,goout,Dalc,Walc,health,absences, .keep_all = TRUE)
apply.source$avggrades <- rowMeans(cbind(apply.source$G1,apply.source$G2,apply.source$G3))
apply.source$alcohol <- apply.source$Dalc + apply.source$Walc
apply.source$alcohol <- as.factor(apply.source$alcohol)
apply.source$alc <- mapvalues(apply.source$alcohol,
from = 2:10,
to = c("no","yes","yes","yes","yes","yes","yes","yes","yes"))
head(apply.source)
t.test(avggrades ~ alc, data=apply.source)
str3=ggplot(apply.source, aes(x=Dalc, y=avggrades, group=Dalc)) +
geom_boxplot() + theme(legend.position="none") + scale_fill_manual(values=waffle.col) +
xlab("Alcohol consumption") + ylab("Daily Average Grades") + ggtitle("Average Grade")
str4=ggplot(apply.source, aes(x=Walc, y=avggrades, group=Walc)) +
geom_boxplot() + theme(legend.position="none") + scale_fill_manual(values=waffle.col) +
xlab("Alcohol consumption") + ylab("Weekend Average Grades") + ggtitle("Average Grade")
grid.arrange(str3,str4,nrow=2)
failureind <- which(names(apply.source)=="failures")
apply.source <- apply.source[,-failureind]
reg2 <- lm(apply.source$avggrades ~ ., data=apply.source[, 1:29])
summary(reg2)
m1 <- lm(apply.source$avggrades ~ studytime, data=apply.source)
m2 <- lm(apply.source$avggrades ~ higher, data=apply.source)
m3 <- lm(apply.source$avggrades ~ schoolsup, data=apply.source)
m4 <- update(m3, . ~ . + studytime + higher,  data = apply.source)
res_lm <- lapply(list(m1, m2, m3, m4), summary)
(res_lm[[4]]$r.sq - res_lm[[1]]$r.sq)/res_lm[[4]]$r.sq
anova(m1, m4)
(res_lm[[4]]$r.sq - res_lm[[2]]$r.sq)/res_lm[[4]]$r.sq
anova(m2, m4)
(res_lm[[4]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[4]]$r.sq
anova(m3, m4)
library(rpart)
library(DMwR)
regtree <- rpart(apply.source$avggrades~., data=apply.source[,1:29])
prettyTree(regtree)
#predictions
apply.source$Dalc <- as.numeric(apply.source$Dalc)
lm.predictions <- predict(reg2,apply.source)
rt.predictions <- predict(regtree,apply.source)
nmse.lm<-mean((lm.predictions-apply.source[,"avggrades"])^2)/mean(
(mean(apply.source$avggrades)-apply.source[,"avggrades"])^2)
nmse.rt<-mean((rt.predictions-apply.source[,"avggrades"])^2)/mean(
(mean(apply.source$avggrades)-apply.source[,"avggrades"])^2)
print(nmse.lm) #0.79
print(nmse.rt) #0.85
lm.plt.data1=data.frame(cbind(lm.predictions,apply.source[,"avggrades"]))
colnames(lm.plt.data1) <- c("lm.predictions","avggrades")
rt.plt.data1=data.frame(cbind(rt.predictions,apply.source[,"avggrades"]))
colnames(rt.plt.data1) <- c("rt.predictions","avggrades")
apply.source$Dalc <- as.factor(apply.source$Dalc)
errplt.lm1 <- ggplot(lm.plt.data1,aes(lm.predictions,avggrades))+
geom_point(aes(color=apply.source[,"Dalc"]))+
xlab("Predicted Grades (Linear Model)")+
ylab("Actual Grades")+
geom_abline(intercept=0,slope=1,color="#00cc4e",size=1)+
scale_colour_brewer(palette = "Set1",name = "Daily Alcohol \nConsumption")
errplt.rt1 <- ggplot(rt.plt.data1,aes(rt.predictions,avggrades))+
geom_point(aes(color=apply.source[,"Dalc"]))+
xlab("Predicted Grades (Regression Tree)")+
ylab("Actual Grades")+
geom_abline(intercept=0,slope=1,color="#00cc4e",size=1)+
scale_colour_brewer(palette = "Set1",name = "Daily Alcohol \nConsumption")
grid.arrange(errplt.lm1,errplt.rt1,nrow=2)
library(randomForest)
set.seed(8000)
rf2 <- randomForest(apply.source$avggrades~., data=apply.source[,1:29], ntree=500, importance=T)
rf.predictions <- predict(rf2,apply.source)
nmse.rf <- mean((rf.predictions-apply.source[,"avggrades"])^2)/mean(
(mean(apply.source$avggrades)-apply.source[,"avggrades"])^2)
print(nmse.rf) #0.2
#first combine the rf predictions and actual scores in a single data frame
rf.plt.data1 <- data.frame(cbind(rf.predictions,apply.source[,"avggrades"]))
colnames(rf.plt.data1)<-c("rf.predictions","avggrades")
# then create the error plot.
errplt.rf1 <- ggplot(rf.plt.data1,aes(rf.predictions,avggrades))+
geom_point(aes(color=apply.source[,"Dalc"]))+
xlab("Predicted Grades (Random Forest with 500 Trees)")+
ylab("Actual Grades")+
geom_abline(intercept=0,slope=1,color="#0066CC",size=1)+
#geom_smooth(method = "lm", se = FALSE)+
scale_colour_brewer(palette = "Set1",name = "Daily Alcohol \nConsumption")
#finally, plot the error plot from the random forest with the error plots of the linear and regression tree models.
grid.arrange(errplt.rf1, errplt.lm1,errplt.rt1,nrow=3)
cv.data <- apply.source[sample(nrow(apply.source)),]
folds <- cut(seq(1,nrow(cv.data)),breaks=10,labels=FALSE)
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- apply.source[testIndexes, ]
trainData <- apply.source[-testIndexes, ]
#Use the test and train data partitions however you desire...
}
library(caret)
install.packages('caret')
varImpPlot(rf2,type=1)
library(randomForest)
set.seed(5000)
rf2 <- randomForest(apply.source$avggrades~., data=apply.source[,1:29], ntree=500, importance=T)
rf.predictions <- predict(rf2,apply.source)
nmse.rf <- mean((rf.predictions-apply.source[,"avggrades"])^2)/mean(
(mean(apply.source$avggrades)-apply.source[,"avggrades"])^2)
print(nmse.rf) #0.2
#first combine the rf predictions and actual scores in a single data frame
rf.plt.data1 <- data.frame(cbind(rf.predictions,apply.source[,"avggrades"]))
colnames(rf.plt.data1)<-c("rf.predictions","avggrades")
# then create the error plot.
errplt.rf1 <- ggplot(rf.plt.data1,aes(rf.predictions,avggrades))+
geom_point(aes(color=apply.source[,"Dalc"]))+
xlab("Predicted Grades (Random Forest with 500 Trees)")+
ylab("Actual Grades")+
geom_abline(intercept=0,slope=1,color="#0066CC",size=1)+
#geom_smooth(method = "lm", se = FALSE)+
scale_colour_brewer(palette = "Set1",name = "Daily Alcohol \nConsumption")
#finally, plot the error plot from the random forest with the error plots of the linear and regression tree models.
grid.arrange(errplt.rf1, errplt.lm1,errplt.rt1,nrow=3)
varImpPlot(rf2,type=1)
# this metric is obtained by measuring the %increase in MSE of the model if the variable is removed
library(randomForest)
set.seed(2000)
rf2 <- randomForest(apply.source$avggrades~., data=apply.source[,1:29], ntree=500, importance=T)
rf.predictions <- predict(rf2,apply.source)
nmse.rf <- mean((rf.predictions-apply.source[,"avggrades"])^2)/mean(
(mean(apply.source$avggrades)-apply.source[,"avggrades"])^2)
print(nmse.rf) #0.2
#first combine the rf predictions and actual scores in a single data frame
rf.plt.data1 <- data.frame(cbind(rf.predictions,apply.source[,"avggrades"]))
colnames(rf.plt.data1)<-c("rf.predictions","avggrades")
# then create the error plot.
errplt.rf1 <- ggplot(rf.plt.data1,aes(rf.predictions,avggrades))+
geom_point(aes(color=apply.source[,"Dalc"]))+
xlab("Predicted Grades (Random Forest with 500 Trees)")+
ylab("Actual Grades")+
geom_abline(intercept=0,slope=1,color="#0066CC",size=1)+
#geom_smooth(method = "lm", se = FALSE)+
scale_colour_brewer(palette = "Set1",name = "Daily Alcohol \nConsumption")
#finally, plot the error plot from the random forest with the error plots of the linear and regression tree models.
grid.arrange(errplt.rf1, errplt.lm1,errplt.rt1,nrow=3)
varImpPlot(rf2,type=1)
# this metric is obtained by measuring the %increase in MSE of the model if the variable is removed
library(randomForest)
set.seed(8000)
rf2 <- randomForest(apply.source$avggrades~., data=apply.source[,1:29], ntree=500, importance=T)
rf.predictions <- predict(rf2,apply.source)
nmse.rf <- mean((rf.predictions-apply.source[,"avggrades"])^2)/mean(
(mean(apply.source$avggrades)-apply.source[,"avggrades"])^2)
print(nmse.rf) #0.2
#first combine the rf predictions and actual scores in a single data frame
rf.plt.data1 <- data.frame(cbind(rf.predictions,apply.source[,"avggrades"]))
colnames(rf.plt.data1)<-c("rf.predictions","avggrades")
# then create the error plot.
errplt.rf1 <- ggplot(rf.plt.data1,aes(rf.predictions,avggrades))+
geom_point(aes(color=apply.source[,"Dalc"]))+
xlab("Predicted Grades (Random Forest with 500 Trees)")+
ylab("Actual Grades")+
geom_abline(intercept=0,slope=1,color="#0066CC",size=1)+
#geom_smooth(method = "lm", se = FALSE)+
scale_colour_brewer(palette = "Set1",name = "Daily Alcohol \nConsumption")
#finally, plot the error plot from the random forest with the error plots of the linear and regression tree models.
grid.arrange(errplt.rf1, errplt.lm1,errplt.rt1,nrow=3)
varImpPlot(rf2,type=1)
# this metric is obtained by measuring the %increase in MSE of the model if the variable is removed
varImpPlot(rf2,type=1)
varImpPlot(rf2,type=1)
varImpPlot(rf2,type=1)
# this metric is obtained by measuring the %increase in MSE of the model if the variable is removed
imp <- importance(rf2)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(rf2, apply.source[,1:30], impvar[i], rug=TRUE, xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]))
abline(h=mean(apply.source$avggrades),col="red")
}
par(op)
imp <- importance(rf2)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(rf2, apply.source[,1:30], impvar[i], rug=TRUE, xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]))
abline(h=mean(apply.source$avggrades),col="red")
}
par(op)
imp <- importance(rf2)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(rf2, apply.source[,1:30], impvar[i], rug=TRUE, xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]))
abline(h=mean(apply.source$avggrades),col="red")
}
par(op)
View(apply.source)
varImpPlot(rf2,type=1)
# this metric is obtained by measuring the %increase in MSE of the model if the variable is removed
imp <- importance(rf2)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(rf2, apply.source[,1:29], impvar[i], rug=TRUE, xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]))
abline(h=mean(apply.source$avggrades),col="red")
}
par(op)
varImpPlot(rf2,type=1)
# this metric is obtained by measuring the %increase in MSE of the model if the variable is removed
imp <- importance(rf2)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(rf2, apply.source[,1:30], impvar[i], rug=TRUE, xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]))
abline(h=mean(apply.source$avggrades),col="red")
}
par(op)
require(corrplot)
corrplot(cor(imp), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
install.packages('corrplot')
require(corrplot)
corrplot(cor(imp), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
corrplot(cor(imp), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(apply.source), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
require(corrplot)
corrplot(cor(apply.source), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(apply.source), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
imp
imp.var <- apply.source[,c('avggrades','Pstatus','famsupport','famrel','absences')]
imp.var <- apply.source[,c('avggrades','Pstatus','famsupport','famrel','absences')]
imp.var <- apply.source[,c('avggrades','Pstatus','famsup','famrel','absences', 'romantic')]
require(corrplot)
corrplot(cor(imp.var), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
View(imp.var)
cor(imp.var)
as.numeric(as.factor(imp.var))
as.numeric(as.factor(imp.var$Pstatus))
imp.var$Pstatus <- as.numeric(as.factor(imp.var$Pstatus)) -1
View(imp.var)
imp.var$famsup <- as.numeric(as.factor(imp.var$famsup)) -1
imp.var$romantic <- as.numeric(as.factor(imp.var$romantic)) -1
require(corrplot)
corrplot(cor(imp.var), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
imp.var <- apply.source[,c('avggrades','Pstatus','famsup','famrel','absences', 'romantic')]
imp.var$Pstatus <- as.numeric(as.factor(imp.var$Pstatus)) -1
# 0 represent A which indicate apart while 1 represent T which indicate together
imp.var$famsup <- as.numeric(as.factor(imp.var$famsup)) -1
# 0 represent no while 1 represent yes
imp.var$romantic <- as.numeric(as.factor(imp.var$romantic)) -1
# 0 represent no while 1 represent yes
require(corrplot)
corrplot(cor(imp.var), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
imp.var <- apply.source[,c('avggrades','Pstatus','famsup','famrel','absences', 'romantic')]
imp.var$Pstatus <- as.numeric(as.factor(imp.var$Pstatus)) -1
# 0 represent A which indicate apart while 1 represent T which indicate together
imp.var$famsup <- as.numeric(as.factor(imp.var$famsup)) -1
# 0 represent no while 1 represent yes
imp.var$romantic <- as.numeric(as.factor(imp.var$romantic)) -1
# 0 represent no while 1 represent yes
require(corrplot)
corrplot(cor(imp.var), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
corrplot(imp.var, p.mat = M$P, insig = "label_sig",
sig.level = c(.001, .01, .05), pch.cex=0.9, pch.col = "white")
corrplot(imp.var, p.mat = imp.var, insig = "label_sig",
sig.level = c(.001, .01, .05), pch.cex=0.9, pch.col = "white")
corrplot(cor(imp.var), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
corrplot(M, na.label = "square", label.col = "orange")
corrplot(cor(imp.var), na.label = "square", label.col = "orange")
corrplot(cor(imp.var), na.label = "square", na.label.col = "orange")
corrplot(cor(imp.var), label = "square", label.col = "orange")
corrplot(cor(imp.var), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
corrplot(cor(imp.var), label = "square", label.col = "orange")
corrplot(cor(imp.var), label = "square")
corrplot(cor(imp.var))
corrplot(cor(imp.var)$avggrades)
require(corrplot)
corrplot(cor(imp.var), method="color", order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
require(corrplot)
corrplot(cor(imp.var), method="color", order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
require(corrplot)
corrplot(cor(imp.var), method="color", order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp', col="RdYlBu")
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
require(corrplot)
corrplot(cor(imp.var), method="color", order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp', colors="RdYlBu")
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
require(corrplot)
corrplot(cor(imp.var), method="color", order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp', color="RdYlBu")
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(RColorBrewer)
corrplot(cor(imp.var), method="color", order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
library(RColorBrewer)
require(corrplot)
corrplot(cor(imp.var), method="pie", order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
cor(imp.var)
library(RColorBrewer)
require(corrplot)
corrplot(cor(imp.var), method="pie", order = 'hclust', addrect = 4, order = "AOE",
type = 'upper', tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number', order = "AOE",
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
library(RColorBrewer)
require(corrplot)
corrplot(cor(imp.var), method="pie", order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
library(RColorBrewer)
require(corrplot)
corrplot(cor(imp.var), method="pie", addrect = 4,
type = 'upper', tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
library(RColorBrewer)
require(corrplot)
corrplot(cor(imp.var), method="pie", addrect = 4, type = 'upper',
tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
imp.var <- apply.source[,c('avggrades','Pstatus','famsup','famrel','absences', 'romantic')]
imp.var$Pstatus <- as.numeric(as.factor(imp.var$Pstatus)) -1
# 0 represent A which indicate apart while 1 represent T which indicate together
imp.var$famsup <- as.numeric(as.factor(imp.var$famsup)) -1
# 0 represent no while 1 represent yes
imp.var$romantic <- as.numeric(as.factor(imp.var$romantic)) -1
# 0 represent no while 1 represent yes
library(RColorBrewer)
require(corrplot)
corrplot(cor(imp.var), method="pie", addrect = 4, type = 'upper',
tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
imp.var <- apply.source[,c('avggrades','Pstatus','famsup','famrel','absences', 'romantic')]
imp.var$Pstatus <- as.numeric(as.factor(imp.var$Pstatus)) -1
# 0 represent A which indicate apart while 1 represent T which indicate together
imp.var$famsup <- as.numeric(as.factor(imp.var$famsup)) -1
# 0 represent no while 1 represent yes
imp.var$romantic <- as.numeric(as.factor(imp.var$romantic)) -1
# 0 represent no while 1 represent yes
library(RColorBrewer)
require(corrplot)
corrplot(cor(imp.var), method="pie", addrect = 4, type = 'upper',
tl.pos = 'tp', col=brewer.pal(n=8, name="RdYlBu"))
corrplot(cor(imp.var), add = TRUE, type = 'lower', method = 'number',
col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
