library(tm)
library(jiebaRD)
library(jiebaR)
library(RColorBrewer)
library(wordcloud)
filenames <- list.files(getwd(), pattern="*.txt")
files <- lapply(filenames, readLines)
docs <- Corpus(VectorSource(files))
#移除可能有問題的符號
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
docs <- tm_map(docs, toSpace, "※")
docs <- tm_map(docs, toSpace, "◆")
docs <- tm_map(docs, toSpace, "‧")
docs <- tm_map(docs, toSpace, "的")
docs <- tm_map(docs, toSpace, "我")
docs <- tm_map(docs, toSpace, "是")
docs <- tm_map(docs, toSpace, "看板")
docs <- tm_map(docs, toSpace, "作者")
docs <- tm_map(docs, toSpace, "發信站")
docs <- tm_map(docs, toSpace, "批踢踢實業坊")
docs <- tm_map(docs, toSpace, "[a-zA-Z]")
docs <- tm_map(docs, toSpace, "推")
docs <- tm_map(docs, toSpace, "有")
docs <- tm_map(docs, toSpace, "就")
docs <- tm_map(docs, toSpace, "了")
docs <- tm_map(docs, toSpace, "不")
docs <- tm_map(docs, toSpace, "在")
docs <- tm_map(docs, toSpace, "都")
docs <- tm_map(docs, toSpace, "也")
docs <- tm_map(docs, toSpace, "很")
docs <- tm_map(docs, toSpace, "們")
docs <- tm_map(docs, toSpace, "到")
#移除標點符號 (punctuation)
#移除數字 (digits)、空白 (white space)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
#Open html
library(xml2)
library(tmcn)
library(rvest)
id = c(1:5)
URL = paste0("https://www.ptt.cc/bbs/Japan_Travel/index", id, ".html")
filename = paste0(id, ".txt")
pttTestFunction(URL[1], filename[1])
#Function
pttTestFunction <- function(URL, filename)
{
#URL   = "https://www.ptt.cc/bbs/NTUcourse/index.html"
html  = read_html(URL)
title = html_nodes(html, "a")
href  = html_attr(title, "href")
data = data.frame(title = toUTF8(html_text(title)),
href = href)
data = data[-c(1:10),]
getContent <- function(x) {
url  = paste0("https://www.ptt.cc", x)
tag  = html_node(read_html(url), 'div#main-content.bbs-screen.bbs-content')
text = toUTF8(html_text(tag))
}
#getContent(data$href[1])
allText = sapply(data$href, getContent)
allText
#out <- file(filename, "w", encoding="BIG-5")
write.table(allText, filename)
#close(out)
}
#Open html
library(xml2)
library(tmcn)
library(rvest)
id = c(1:5)
URL = paste0("https://www.ptt.cc/bbs/Japan_Travel/index", id, ".html")
filename = paste0(id, ".txt")
mapply(pttTestFunction,
URL = URL, filename = filename)
#simplify the data
rm(list=ls(all.names = TRUE))
library(NLP)
library(tm)
library(jiebaRD)
library(jiebaR)
library(RColorBrewer)
library(wordcloud)
filenames <- list.files(getwd(), pattern="*.txt")
files <- lapply(filenames, readLines)
docs <- Corpus(VectorSource(files))
#移除可能有問題的符號
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
docs <- tm_map(docs, toSpace, "※")
docs <- tm_map(docs, toSpace, "◆")
docs <- tm_map(docs, toSpace, "‧")
docs <- tm_map(docs, toSpace, "的")
docs <- tm_map(docs, toSpace, "我")
docs <- tm_map(docs, toSpace, "是")
docs <- tm_map(docs, toSpace, "看板")
docs <- tm_map(docs, toSpace, "作者")
docs <- tm_map(docs, toSpace, "發信站")
docs <- tm_map(docs, toSpace, "批踢踢實業坊")
docs <- tm_map(docs, toSpace, "[a-zA-Z]")
docs <- tm_map(docs, toSpace, "推")
docs <- tm_map(docs, toSpace, "有")
docs <- tm_map(docs, toSpace, "就")
docs <- tm_map(docs, toSpace, "了")
docs <- tm_map(docs, toSpace, "不")
docs <- tm_map(docs, toSpace, "在")
docs <- tm_map(docs, toSpace, "都")
docs <- tm_map(docs, toSpace, "也")
docs <- tm_map(docs, toSpace, "很")
docs <- tm_map(docs, toSpace, "們")
docs <- tm_map(docs, toSpace, "到")
#移除標點符號 (punctuation)
#移除數字 (digits)、空白 (white space)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
#create wordcloud
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
#create wordcloud
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
#calculate words
mixseg = worker()
jieba_tokenizer=function(d){
unlist(segment(d[[1]],mixseg))
}
seg = lapply(docs, jieba_tokenizer)
freqFrame = as.data.frame(table(unlist(seg)))
freqFrame = freqFrame[order(freqFrame$Freq,decreasing=TRUE), ]
library(knitr)
kable(head(freqFrame), format = "markdown")
#create wordcloud
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
#create wordcloud
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,words>2
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,min=2,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,min=4,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,min=2,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,min=2,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,min=2,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.2, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.8, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
par(family=("Heiti TC Light"))
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
par(family=("Microsolf JengHei"))
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
par(family=("Heiti TC Light"))
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
install.packages('wordcloud2')
wordcloud2(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE, shape='triangle',size=0.3)
library(wordcloud2)
wordcloud2(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE, shape='triangle',size=0.3)
wordcloud2(freqFrame$Var1,freqFrame$Freq)
mixseg = worker()
jieba_tokenizer=function(d){
unlist(segment(d[[1]],mixseg))
}
seg = lapply(docs, jieba_tokenizer)
freqFrame = as.data.frame(table(unlist(seg)))
freqFrame = freqFrame[order(freqFrame$Freq,decreasing=TRUE), ]
library(knitr)
kable(head(freqFrame), format = "markdown")
wordcloud2(freqFrame$Var1,freqFrame$Freq)
wordcloud2(freqFrame)
wordcloud2(freqFrame, minSize=10)
wordcloud2(freqFrame, minSize=10, fontFamily='Microsolf Jenghei')
wordcloud2(freqFrame, minSize=10, color='randon_dark')
wordcloud2(freqFrame, minSize=10, color='randon-dark')
wordcloud2(freqFrame, minSize=10, color='randon-dark')
wordcloud2(freqFrame, minSize=10)
wordcloud2(freqFrame, minSize=20, gridSize=20)
wordcloud2(freqFrame, minSize=10, gridSize=20)
wordcloud2(freqFrame, minSize=10, gridSize=5)
wordcloud2(shape='circle', freqFrame, minSize=10, gridSize=5)
wordcloud2(shape='circle', freqFrame, minSize=10, gridSize=10)
wordcloud2(fontFamily = "微软雅黑", shape='circle', freqFrame, minSize=10, gridSize=5)
wordcloud2(fontFamily = "微軟雅黑", shape='circle', freqFrame, minSize=10, gridSize=5)
wordcloud2(shape='star', freqFrame, minSize=10, gridSize=5)
wordcloud2(freqFrame, minSize=10, gridSize=5)
#create wordcloud
wordcloud2(freqFrame, minSize=10, gridSize=5)
View(freqFrame)
class(freqFrame)
new_freqFrame = subset(freqFrame, len(Var1)>=2)
new_freqFrame = subset(freqFrame, length(Var1)>=2)
wordcloud2(new_freqFrame, minSize=10, gridSize=5)
View(new_freqFrame)
View(new_freqFrame)
length('日本')
length('你')
c = ("日本", "你")
c = c("日本", "你")
lenght(c)
length(c)
library(ggmap)
library(mapproj)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map)
library(ggmap)
library(mapproj)
map <- get_map(location = 'Taiwan', zoom = 7)
map <- get_map(location = 'Taiwan', zoom = 7,
language = "zh-TW")
ggmap(map)
map <- get_map(location = 'Taiwan', zoom = 7, language = "zh-TW")
ggmap(map)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map)
library(ggmap)
library(mapproj)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map)
library(ggmap)
library(mapproj)
map <- get_map(location='Taiwan', zoom=7, maptype='toner-lite')
ggmap(map)
data1<- read_csv("NTUGEOG+R.csv")
data1 <- read_csv('台電再生能源各場址資料.csv')
library(readr)
data1 <- read_csv('台電再生能源各場址資料.csv')
library(readr)
data1 <- read_csv('台電再生能源各場址資料.csv')
> getwd()
> getwd()
getwd()
setwd('D:/2018.07 R_DataAnalysis/2018SUMMER_R/data')
data1 <- read_csv('台電再生能源各場址資料.csv')
data1 <- read_csv('TP_Renewable_Energy.csv')
View(data1)
data1 <- read_csv('TP_Renewable_Energy.csv')
View(data1)
View(data1)
ggmap(map) + geom_point(aes(x = lon, y = lat), data = uv)
ggmap(map) + geom_point(aes(x = lon, y = lat), data=data1)
data1$座標
data1$座標[1]
lng <- sapply((strsplit(as.character(data1$座標), '')), as_numeric)
lng <- sapply((strsplit(as.character(data1$座標), '')), as.numeric)
lng <- sapply((strsplit(data1$座標, ' ')), as.numeric)
View(lng)
lng <- sapply((strsplit(as.character(data1$座標), '')), as.numeric)
View(lng)
lng <- sapply((strsplit(as.character(data1$座標), '\n')), as.numeric)
warnings()
lng <- lapply((strsplit(as.character(data1$座標), '\n')), as.numeric)
lng <- sapply((strsplit(as.character(data1$座標), '\n')))
lng <- strsplit(as.character(data1$座標), '\n')
View(lng)
lng <- substring(as.character(data1$座標),1,12)
lng
lat <- substring(as.character(data1$座標),12,24)
lat <- substring(as.character(data1$座標),1,12)
lng <- substring(as.character(data1$座標),12,24)
data2 <- dataframe(data1, data1$座標)
data2 <- data.frame(data1, data1$座標)
View(data2)
data2 <- data.frame(data1, lat)
View(data2)
data2 <- data.frame(data1, lat, lng)
View(data2)
ggmap(map) + geom_point(aes(x=lng, y=lat, size=單機/片容量(kW)), data = data2)
ggmap(map) + geom_point(aes(x=lng, y=lat, size='單機/片容量(kW)'), data = data2)
ggmap(map) + geom_point(aes(x=lng, y=lat, size=2), data = data2)
ggmap(map) + geom_point(aes(x=lng, y=lat), data = data2)
ggmap(map) + geom_point(aes(x=data2$lng, y=data2$lat), data = data2)
lng <- substring(as.character(data1$座標),13,26)
lat <- substring(as.character(data1$座標),1,12)
lng <- substring(as.character(data1$座標),13,26)
data2 <- data.frame(data1, lat, lng)
lat <- substring(as.character(data1$座標),1,12)
lng <- substring(as.character(data1$座標),13,27)
data2 <- data.frame(data1, lat, lng)
ggmap(map) + geom_point(aes(x=data2$lng, y=data2$lat), data = data2)
ggmap(map) + geom_point(aes(x=lng, y=lat), data = data2)
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
data1 <- read_csv('TP_Renewable_Energy.csv')
data1$座標[1]
lat <- substring(as.character(data1$座標),1,12)
lng <- substring(as.character(data1$座標),13,26)
data2 <- data.frame(data1, lat, lng)
View(data2)
lat <- substring(as.character(data1$座標),1,11)
lng <- substring(as.character(data1$座標),13,26)
data2 <- data.frame(data1, lat, lng)
View(data2)
lat <- substring(as.character(data1$座標),1,11)
lng <- substring(as.character(data1$座標),13,25)
data2 <- data.frame(data1, lat, lng)
View(data2)
lat <- substring(as.character(data1$座標),1,11)
lng <- substring(as.character(data1$座標),13,26)
data2 <- data.frame(data1, lat, lng)
View(data2)
lng.deg <- sapply((strsplit(as.character(data2$lng), ",")), as.numeric)
uv$lng.deg <- lng.deg[1, ] + lng.deg[2, ]/60 + lng.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(data2$lat), ",")), as.numeric)
uv$lat.deg <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
data1$座標[1]
lat <- substring(as.character(data1$座標),1,11)
lng <- substring(as.character(data1$座標),13,26)
data2 <- data.frame(data1, lat, lng)
lat <- substring(as.character(data1$座標),1,11)
lng <- substring(as.character(data1$座標),13,27)
data2 <- data.frame(data1, lat, lng)
lat <- substring(as.character(data1$座標),1,12)
lng <- substring(as.character(data1$座標),13,27)
data2 <- data.frame(data1, lat, lng)
lat <- substring(as.character(data1$座標),1,12)
lng <- substring(as.character(data1$座標),13,28)
data2 <- data.frame(data1, lat, lng)
lat <- substring(as.character(data1$座標),1,12)
lng <- substring(as.character(data1$座標),13,)
data2 <- data.frame(data1, lat, lng)
lat <- substring(as.character(data1$座標),1,10)
lng <- substring(as.character(data1$座標),13,)
data2 <- data.frame(data1, lat, lng)
lat <- substring(as.character(data1$座標),1,10)
lng <- substring(as.character(data1$座標),13,24)
data2 <- data.frame(data1, lat, lng)
lat <- substring(as.character(data1$座標),1,10)
lng <- substring(as.character(data1$座標),13,25)
data2 <- data.frame(data1, lat, lng)
lat.deg <- substring(as.character(lat), 1,3)
library(ggmap)
library(mapproj)
map <- get_map(location='Taiwan', zoom=7, maptype='toner-lite')
ggmap(map)
library(readr)
data1 <- read_csv('Debris_Flow_Station.csv')
View(data1)
data1 <- read_csv('Debris_Flow_Station.csv')
ggmap(map) + geom_point(aes(x = lon, y = lat, size =5), data=data1)
ggmap(map) + geom_point(aes(x=longitude, y=latitude, size =5), data=data1)
ggmap(map) + geom_point(aes(x='longitude', y='latitude', size =5), data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =5), data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =2), data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =2), data=data1)
library(ggmap)
library(mapproj)
map <- get_map(location='Taiwan', zoom=9, maptype='toner-lite')
library(readr)
data1 <- read_csv('Debris_Flow_Station.csv')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =2), data=data1)
library(ggmap)
library(mapproj)
map <- get_map(location='Taiwan', zoom=8, maptype='toner-lite')
library(readr)
data1 <- read_csv('Debris_Flow_Station.csv')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =2), data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =2, colors='yellow', data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =2, colors='yellow', data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =2, color='red', data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =2, color='red', data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1, data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1, data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1, data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1, data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1, data=data1)
library(ggmap)
library(mapproj)
map <- get_map(location='Taiwan', zoom=8, maptype='toner-lite')
library(readr)
data1 <- read_csv('Debris_Flow_Station.csv')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1, data=data1)
View(data1)
View(data1)
library(ggmap)
library(mapproj)
map <- get_map(location='Taiwan', zoom=8, maptype='toner-lite')
library(readr)
data1 <- read_csv('Debris_Flow_Station.csv')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1), data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1, colors='yellow'), data=data1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1), data=data1, colors='yellow')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1), data=data1, color='yellow')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size =1), data=data1, color='red')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, type=data1$Disaster), data=data1, color='red')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, type=data1$Disaster),
data=data1, color='red', size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, category=data1$Disaster),
data=data1, color='red', size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, color=variable),
data=data1, color='red', size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, color=variable),
data=data1, color='red', size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, color=('red','blue'),
data=data1, color='red', size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, color=('red','blue')),
data=data1, color='red', size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, color=('red','blue')),
data=data1, size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude),
data=data1, size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude),
data=data1, color='red', size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, size=data1$Disaster),
data=data1, color='red')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, color=data1$Disaster),
data=data1, color='red')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, color=cy1),
data=data1, color='red', size=2)
library(ggmap)
library(mapproj)
map <- get_map(location='Taiwan', zoom=8, maptype='toner-lite')
library(readr)
data1 <- read_csv('Debris_Flow_Station.csv')
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude),
data=data1, color='red', size=2)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude),
data=data1, color='red', size=2, mapping=cy1)
ggmap(map) + geom_point(aes(x=data1$Longitude, y=data1$Latitude, colour=factor(cyl)),
data=data1, color='red', size=2)
